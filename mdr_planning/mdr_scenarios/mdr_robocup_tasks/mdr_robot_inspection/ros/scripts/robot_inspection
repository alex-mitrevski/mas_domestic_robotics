#!/usr/bin/python
import sys

import rospy
import smach
import smach_ros

from mdr_robot_inspection.action_states import (Enter, MoveBase, MoveTray,
                                                IntroduceSelf, WaitForCmd,
                                                Acknowledge, WaitForQR)


class RobotInspection(smach.StateMachine):
    """The  Robot Inspection state machine."""
    def __init__(self, pose_param='/script_server/base/entry'):
        # super(RobotInspection, self).__init__()
        smach.StateMachine.__init__(self, outcomes=['DONE', 'TIMEOUT'])
        self.userdata.tray_position = 'DOWN'
        self.userdata.last_command = ''

        # Get the navigation goal specified in the initialization from the
        # script server. Default: "entry"
        if rospy.has_param(pose_param):
            self.pose = rospy.get_param(pose_param)
        else:
            self.pose = [0.0, 0.0, 0.0]

        # Set the pose from the script server as the initial pose mean for AMCL
        rospy.set_param('/amcl/initial_pose_x', self.pose[0])
        rospy.set_param('/amcl/initial_pose_y', self.pose[1])
        rospy.set_param('/amcl/initial_pose_a', self.pose[2])

        with self:
            smach.StateMachine.add('ENTER',
                                   Enter(),
                                   transitions={
                                    'succeeded': 'GO_TO_INSPECTION_WAYPOINT',
                                    'failed': 'ENTER'})

            smach.StateMachine.add('GO_TO_INSPECTION_WAYPOINT',
                                   MoveBase(['inside_arena']),
                                   transitions={
                                    'succeeded': 'INTRODUCE_SELF',
                                    'failed': 'GO_TO_INSPECTION_WAYPOINT'})

            smach.StateMachine.add('INTRODUCE_SELF',
                                   IntroduceSelf(),
                                   transitions={'succeeded': 'WAIT_FOR_CMD',
                                                'failed': 'WAIT_FOR_CMD'})

            # Instead of failed transition was timeout
            smach.StateMachine.add('WAIT_FOR_CMD',
                                   WaitForCmd(),
                                   transitions={'succeeded': 'ACKNOWLEDGE_CMD',
                                                'waiting': 'WAIT_FOR_CMD',
                                                'failed': 'WAIT_FOR_CMD'})

            smach.StateMachine.add('ACKNOWLEDGE_CMD',
                                   Acknowledge(),
                                   transitions={'succeeded': 'MOVE_TRAY',
                                                'failed': 'WAIT_FOR_CMD'})

            # Transitions were tray_up and tray_down
            smach.StateMachine.add('MOVE_TRAY',
                                   MoveTray("Moving tray"),
                                   transitions={'up': 'WAIT_FOR_CMD',
                                                'down': 'WAIT_FOR_QR',
                                                'failed': 'WAIT_FOR_CMD'})

            # Original state was timeout instead of failed
            smach.StateMachine.add('WAIT_FOR_QR',
                                   WaitForQR(),
                                   transitions={'succeeded': 'CONFIRM_QR_CODE',
                                                'waiting': 'WAIT_FOR_QR',
                                                'failed': 'WAIT_FOR_QR'})

            smach.StateMachine.add('CONFIRM_QR_CODE',
                                   Acknowledge(),
                                   transitions={'succeeded': 'EXIT',
                                                'failed': 'CONFIRM_QR_CODE'})

            smach.StateMachine.add('EXIT',
                                   MoveBase(['exit_door', 'outside_arena']),
                                   transitions={'succeeded': 'DONE',
                                                'failed': 'EXIT'})


def main():
    rospy.init_node('robot_inspection')

    SM = RobotInspection()

    smach_viewer = smach_ros.IntrospectionServer('robot_inspection', SM,
                                                 'ROBOT_INSPECTION')
    smach_viewer.start()

    result = SM.execute()
    while (result is None):
        rospy.spin()
    rospy.loginfo('Robot inspection complete.')
    smach_viewer.stop()


if __name__ == '__main__':
    main()
